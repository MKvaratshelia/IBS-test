{"version":3,"sources":["components/Weather.js","components/Form.js","components/WeatherList.js","store/weatherStore.js","weatherContext/weatherContext.js","components/App.js","index.js"],"names":["Weather","weather","city","date","Date","useObserver","className","name","getDate","dt","getMonth","getFullYear","style","width","height","marginRight","src","icon","alt","description","Math","round","main","temp","wind","speed","Form","props","console","log","load","useState","setCity","error","setError","buttonDisabled","setButtonDisabled","placeholder","type","value","onChange","e","target","trim","replace","length","disabled","onClick","onClickWeather","onClickWeatherForDays","loadList","WeatherList","padding","listDays","list","map","index","key","random","API_KEY","createWeatherStore","loadingData","loadingButton","loadingListButton","loadListDays","weatherForDays","getingWeather","preventDefault","fetch","response","json","data","getingWeatherForDays","WeatherContext","React","createContext","WeatherProvider","children","weatherStore","useLocalStore","Provider","App","useContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42cbec3d.chunk.js","sourcesContent":["import { useObserver } from \"mobx-react\";\r\nimport React from \"react\";\r\n\r\nexport const Weather = ({ weather, city }) => {\r\n  const date = new Date();\r\n\r\n  return useObserver(() => (\r\n    <div className=\"card mt-4 cards_item\">\r\n      <div className=\"card-body\">\r\n        {weather.name ? (\r\n          <p>\r\n            <strong>Город:</strong> {weather.name}\r\n          </p>\r\n        ) : (\r\n          <p>\r\n            <strong>Город:</strong> {city}\r\n          </p>\r\n        )}\r\n        <p>\r\n          <strong>Дата:</strong>{\" \"}\r\n          {`${date.getDate(weather.dt)}/${\r\n            date.getMonth(weather.dt) + 1\r\n          }/${date.getFullYear(weather.dt)}`}\r\n        </p>\r\n        <div>\r\n          <img\r\n            style={{ width: \"50px\", height: \"50px\", marginRight: \"10px\" }}\r\n            src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`}\r\n            alt=\"Иконка погоды\"\r\n          />\r\n          <span>{weather.weather[0].description}</span>\r\n        </div>\r\n        <p>\r\n          <strong>Температура:</strong> {Math.round(weather.main.temp)} &deg;C\r\n        </p>\r\n        <p>\r\n          <strong>Ветер:</strong> {Math.round(weather.wind.speed)} м/с\r\n        </p>\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./Form.css\";\r\n\r\nexport const Form = (props) => {\r\n  console.log(props.load);\r\n  const [city, setCity] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [buttonDisabled, setButtonDisabled] = useState(true);\r\n\r\n  const handleChangeCity = (e) => {\r\n    const target = e.target.value.trim().replace(/[0-9]/g, \"\");\r\n    if (target.length === 0) {\r\n      setError(true);\r\n      setButtonDisabled(true);\r\n    } else {\r\n      setError(false);\r\n      setButtonDisabled(false);\r\n    }\r\n    setCity(target);\r\n  };\r\n\r\n  return (\r\n    <form className=\"mb-5\">\r\n      <div className=\"form-group mb-5\">\r\n        <input\r\n          name=\"city\"\r\n          placeholder=\"Введите название города\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          value={city}\r\n          onChange={handleChangeCity}\r\n        />\r\n        {error ? (\r\n          <span className=\"error\">Поле поиска не может быть пустым</span>\r\n        ) : null}\r\n      </div>\r\n      <button\r\n        disabled={buttonDisabled}\r\n        type=\"submit\"\r\n        className=\"btn btn-primary button\"\r\n        onClick={(e) => props.onClickWeather(e, city)}\r\n      >\r\n        {props.load ? \"Загрузка...\" : \"Узнать погоду\"}\r\n      </button>\r\n      <button\r\n        disabled={buttonDisabled}\r\n        className=\"btn btn-success button\"\r\n        type=\"submit\"\r\n        onClick={(e) => props.onClickWeatherForDays(e, city)}\r\n      >\r\n        {props.loadList ? \"Загрузка...\" : \"На 5 дней\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Weather } from \"./Weather\";\r\n\r\nexport const WeatherList = (props) => {\r\n  return (\r\n    <section className=\"\">\r\n      <h2 className=\"mt-4\">Погода на 5 дней</h2>\r\n      <div style={{ padding: \"0px\" }} className=\"row justify-content-between\">\r\n        {props.listDays.list.map((weather, index) => {\r\n          return (\r\n            <Weather\r\n              key={Math.random() + index}\r\n              weather={weather}\r\n              city={props.listDays.city.name}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","const API_KEY = \"bf1a366ca5874c2b9a3eba8b316c1d5b\";\r\n\r\nexport const createWeatherStore = () => {\r\n  return {\r\n    weather: {},\r\n    loadingData: false,\r\n    loadingButton: false,\r\n    loadingListButton: false,\r\n    loadListDays: false,\r\n    weatherForDays: {},\r\n\r\n    async getingWeather(e, city) {\r\n      e.preventDefault();\r\n\r\n      this.loadingButton = true;\r\n      this.loadListDays = false;\r\n\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        this.weather = { ...this.weather, ...data };\r\n\r\n        this.loadingButton = false;\r\n        this.loadingData = true;\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    },\r\n\r\n    async getingWeatherForDays(e, city) {\r\n      e.preventDefault();\r\n\r\n      this.loadingData = false;\r\n      this.loadingListButton = true;\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=ru`\r\n        );\r\n        const data = await response.json();\r\n        // this.weatherForDays.push(...this.weatherForDays, ...data.list);\r\n        this.weatherForDays = { ...this.weatherForDays, ...data };\r\n        console.log(data);\r\n\r\n        this.loadListDays = true;\r\n        this.loadingListButton = false;\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    },\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { createWeatherStore } from \"../store/weatherStore\";\r\nimport { useLocalStore } from \"mobx-react\";\r\nconst WeatherContext = React.createContext(null);\r\n\r\nexport const WeatherProvider = ({ children }) => {\r\n  const weatherStore = useLocalStore(createWeatherStore);\r\n  return (\r\n    <WeatherContext.Provider value={weatherStore}>\r\n      {children}\r\n    </WeatherContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWeatherStore = () => React.useContext(WeatherContext);\r\n","import React from \"react\";\nimport { Weather } from \"./Weather\";\nimport { Form } from \"./Form\";\nimport { WeatherList } from \"./WeatherList\";\nimport { useWeatherStore } from \"../weatherContext/weatherContext\";\nimport { useObserver } from \"mobx-react\";\n\nconst App = () => {\n  const weatherStore = useWeatherStore(); // получаю данные из стора\n\n  return useObserver(() => (\n    <div className=\"container\">\n      <h1 className=\"m-3 title\">Информатор прогноза погоды</h1>\n      <Form\n        onClickWeather={weatherStore.getingWeather}\n        load={weatherStore.loadingButton}\n        loadList={weatherStore.loadingListButton}\n        onClickWeatherForDays={weatherStore.getingWeatherForDays}\n      />\n      {weatherStore.loadingData && <Weather weather={weatherStore.weather} />}\n      {weatherStore.loadListDays && (\n        <WeatherList listDays={weatherStore.weatherForDays} />\n      )}\n    </div>\n  ));\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { WeatherProvider } from \"./weatherContext/weatherContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherProvider>\n      <App />\n    </WeatherProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}